AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  netlify-cms-aws
Transform:
- AWS::Serverless-2016-10-31

Resources:

  authRedirect:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth/redirect.handler
      CodeUri: src/
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 3
      Description: >-
        An AWS Lambda function for authorizing Netlify CMS through GitHub.
        Intended as a proxy function triggered via API Gateway.
        Followed by netlify-cms-auth-token-handler.
      Policies:
        - AWSLambdaBasicExecutionRole

  RedirectApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref authRedirect
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${GitHubAuthApi}/*/${Method}/${Path}
        - Method: GET
          Path: auth

  tokenHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth/token-handler.handler
      CodeUri: src/
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 3
      Description: >-
        An AWS Lambda function for authorizing Netlify CMS through GitHub.
        Intended as a proxy function triggered via API Gateway.
        Preceded by netlify-cms-auth-redirect.
      Policies:
        - AWSLambdaBasicExecutionRole

  TokenHandlerApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref tokenHandler
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com # limit with SourceArn or SourceAccount?
      SourceArn: !Sub
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${GitHubAuthApi}/*/${Method}/${Path}
        - Method: GET
          Path: callback

  GitHubAuthApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: NetlifyCMSGitHubAuth

  GitHubAuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GitHubAuthApi
      ParentId: !GetAtt [ GitHubAuthApi, RootResourceId ]
      PathPart: auth

  GitHubAuthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GitHubAuthApi
      ResourceId: !Ref GitHubAuthResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
          - Arn: !GetAtt [ authRedirect, Arn ]
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false

  # CORS Options Method
  GitHubAuthOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GitHubAuthApi
      ResourceId: !Ref GitHubAuthResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters: 
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  GitHubCallbackResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GitHubAuthApi
      ParentId: !GetAtt [ GitHubAuthApi, RootResourceId ]
      PathPart: callback

  GitHubCallbackMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GitHubAuthApi
      ResourceId: !Ref GitHubCallbackResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
          - Arn: !GetAtt [ tokenHandler, Arn ]
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false

  # CORS Options Method
  GitHubCallbackOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GitHubAuthApi
      ResourceId: !Ref GitHubCallbackResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters: 
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

Outputs:
  NetlifyCMSRestApiId:
    Description: Logical ID for the Netlify CMS Rest API
    Value: !Ref GitHubAuthApi
  NetlifyCMSRootResourceId:
    Description: Root resource ID for the Netlify CMS Rest API
    Value: !GetAtt [ GitHubAuthApi, RootResourceId ]
